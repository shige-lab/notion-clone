{"ast":null,"code":"var _jsxFileName = \"/Users/shige11910/notion-clone/frontend/src/Editor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"draft-js/dist/Draft.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditorApp(props) {\n  _s();\n\n  const [text, setText] = useState(\"\"); // const [title, setTitle] = useState(\"\");\n  // const [id, setId] = useState(\"\");\n\n  const note = props.note;\n  const noteUpdate = props.noteUpdate; // const updateBody = async (val: string) => {\n  // \tawait setText(val);\n  // \tconsole.log(text);\n  // };\n  // console.log(note.title);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      // className={classes.titleInput}\n      placeholder: \"Untitled\",\n      value: note.title ? note.title : \"\" // onChange={(e) => this.updateTitle(e.target.value)}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n      value: text,\n      onChange: props.noteUpdate(note.id, note)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      // className={classes.titleInput}\n      placeholder: \"content\",\n      value: note.body ? note.body : \"\" // onChange={(e) => this.updateTitle(e.target.value)}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 3\n  }, this);\n}\n\n_s(EditorApp, \"3t0DFnMi16eB/7p7iIKtjG5r68g=\");\n\n_c = EditorApp;\nexport default EditorApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorApp\");","map":{"version":3,"sources":["/Users/shige11910/notion-clone/frontend/src/Editor.tsx"],"names":["React","useState","ReactQuill","EditorApp","props","text","setText","note","noteUpdate","title","id","body"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAQA,OAAO,yBAAP;;;AAIA,SAASC,SAAT,CAAmBC,KAAnB,EAA+B;AAAA;;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC,CAD8B,CAE9B;AACA;;AACA,QAAMM,IAAI,GAAGH,KAAK,CAACG,IAAnB;AACA,QAAMC,UAAU,GAAGJ,KAAK,CAACI,UAAzB,CAL8B,CAO9B;AACA;AACA;AACA;AACA;;AACA,sBACC;AAAA,4BACC;AACC;AACA,MAAA,WAAW,EAAC,UAFb;AAGC,MAAA,KAAK,EAAED,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAlB,GAA0B,EAHlC,CAIC;;AAJD;AAAA;AAAA;AAAA;AAAA,YADD,eAOC,QAAC,UAAD;AACC,MAAA,KAAK,EAAEJ,IADR;AAEC,MAAA,QAAQ,EAAED,KAAK,CAACI,UAAN,CAAiBD,IAAI,CAACG,EAAtB,EAA0BH,IAA1B;AAFX;AAAA;AAAA;AAAA;AAAA,YAPD,eAWC;AACC;AACA,MAAA,WAAW,EAAC,SAFb;AAGC,MAAA,KAAK,EAAEA,IAAI,CAACI,IAAL,GAAYJ,IAAI,CAACI,IAAjB,GAAwB,EAHhC,CAIC;;AAJD;AAAA;AAAA;AAAA;AAAA,YAXD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAoBA;;GAhCQR,S;;KAAAA,S;AAkCT,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport {\n\tEditor,\n\tEditorState,\n\tRichUtils,\n\tconvertToRaw,\n\tContentState,\n} from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { render } from \"@testing-library/react\";\n\nfunction EditorApp(props: any) {\n\tconst [text, setText] = useState(\"\");\n\t// const [title, setTitle] = useState(\"\");\n\t// const [id, setId] = useState(\"\");\n\tconst note = props.note;\n\tconst noteUpdate = props.noteUpdate;\n\n\t// const updateBody = async (val: string) => {\n\t// \tawait setText(val);\n\t// \tconsole.log(text);\n\t// };\n\t// console.log(note.title);\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\t// className={classes.titleInput}\n\t\t\t\tplaceholder=\"Untitled\"\n\t\t\t\tvalue={note.title ? note.title : \"\"}\n\t\t\t\t// onChange={(e) => this.updateTitle(e.target.value)}\n\t\t\t/>\n\t\t\t<ReactQuill\n\t\t\t\tvalue={text}\n\t\t\t\tonChange={props.noteUpdate(note.id, note)}\n\t\t\t></ReactQuill>\n\t\t\t<input\n\t\t\t\t// className={classes.titleInput}\n\t\t\t\tplaceholder=\"content\"\n\t\t\t\tvalue={note.body ? note.body : \"\"}\n\t\t\t\t// onChange={(e) => this.updateTitle(e.target.value)}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default EditorApp;\n"]},"metadata":{},"sourceType":"module"}