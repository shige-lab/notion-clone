{"ast":null,"code":"var _jsxFileName = \"/Users/shige11910/notion-clone/frontend/src/Editor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport _ from \"lodash\";\nimport \"draft-js/dist/Draft.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditorApp(props) {\n  _s();\n\n  // const [title, setTitle] = useState(\"\");\n  // const [id, setId] = useState(\"\");\n  const note = props.note;\n  const noteUpdate = props.noteUpdate;\n  const {\n    id,\n    title,\n    body\n  } = note;\n  const [text, setText] = useState(body);\n\n  const updateBody = content => {\n    setText(content);\n    console.log(text);\n    update();\n  }; // const update = () => {\n  // \tnoteUpdate(id, {\n  //     id,\n  //     title,\n  // \t\tbody: text,\n  // \t});\n  // };\n\n\n  const update = _.debounce(() => {\n    noteUpdate(id, {\n      id,\n      title,\n      body: text\n    });\n  }, 1500);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      // className={classes.titleInput}\n      placeholder: \"Untitled\",\n      value: title ? title : \"\" // onChange={(e) => this.updateTitle(e.target.value)}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      // className={classes.titleInput}\n      placeholder: \"content\",\n      value: text ? text : \"\",\n      onChange: event => {\n        updateBody(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this);\n}\n\n_s(EditorApp, \"B0aiMlCA8co/mbAizv9dpwifEV4=\");\n\n_c = EditorApp;\nexport default EditorApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorApp\");","map":{"version":3,"sources":["/Users/shige11910/notion-clone/frontend/src/Editor.tsx"],"names":["React","useState","_","EditorApp","props","note","noteUpdate","id","title","body","text","setText","updateBody","content","console","log","update","debounce","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,CAAP,MAAc,QAAd;AAQA,OAAO,yBAAP;;;AAIA,SAASC,SAAT,CAAmBC,KAAnB,EAA+B;AAAA;;AAC9B;AACA;AACA,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAMC,UAAU,GAAGF,KAAK,CAACE,UAAzB;AACA,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA;AAAb,MAAsBJ,IAA5B;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAACQ,IAAD,CAAhC;;AAEA,QAAMG,UAAU,GAAIC,OAAD,IAAqB;AACvCF,IAAAA,OAAO,CAACE,OAAD,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAM,IAAAA,MAAM;AACN,GAJD,CAR8B,CAa9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAMA,MAAM,GAAGd,CAAC,CAACe,QAAF,CAAW,MAAM;AAC/BX,IAAAA,UAAU,CAACC,EAAD,EAAK;AACdA,MAAAA,EADc;AAEdC,MAAAA,KAFc;AAGdC,MAAAA,IAAI,EAAEC;AAHQ,KAAL,CAAV;AAKA,GANc,EAMZ,IANY,CAAf;;AAQA,sBACC;AAAA,4BACC;AACC;AACA,MAAA,WAAW,EAAC,UAFb;AAGC,MAAA,KAAK,EAAEF,KAAK,GAAGA,KAAH,GAAW,EAHxB,CAIC;;AAJD;AAAA;AAAA;AAAA;AAAA,YADD,eAWC;AACC;AACA,MAAA,WAAW,EAAC,SAFb;AAGC,MAAA,KAAK,EAAEE,IAAI,GAAGA,IAAH,GAAU,EAHtB;AAIC,MAAA,QAAQ,EAAGQ,KAAD,IAAgD;AACzDN,QAAAA,UAAU,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACA;AANF;AAAA;AAAA;AAAA;AAAA,YAXD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAsBA;;GAlDQjB,S;;KAAAA,S;AAoDT,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport _ from \"lodash\";\nimport {\n\tEditor,\n\tEditorState,\n\tRichUtils,\n\tconvertToRaw,\n\tContentState,\n} from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { render } from \"@testing-library/react\";\n\nfunction EditorApp(props: any) {\n\t// const [title, setTitle] = useState(\"\");\n\t// const [id, setId] = useState(\"\");\n\tconst note = props.note;\n\tconst noteUpdate = props.noteUpdate;\n\tconst { id, title, body } = note;\n\tconst [text, setText] = useState(body);\n\n\tconst updateBody = (content: string) => {\n\t\tsetText(content);\n\t\tconsole.log(text);\n\t\tupdate();\n\t};\n\t// const update = () => {\n\t// \tnoteUpdate(id, {\n\t//     id,\n\t//     title,\n\t// \t\tbody: text,\n\t// \t});\n\t// };\n\tconst update = _.debounce(() => {\n\t\tnoteUpdate(id, {\n\t\t\tid,\n\t\t\ttitle,\n\t\t\tbody: text,\n\t\t});\n\t}, 1500);\n\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\t// className={classes.titleInput}\n\t\t\t\tplaceholder=\"Untitled\"\n\t\t\t\tvalue={title ? title : \"\"}\n\t\t\t\t// onChange={(e) => this.updateTitle(e.target.value)}\n\t\t\t/>\n\t\t\t{/* <ReactQuill\n\t\t\t\tvalue={text}\n\t\t\t\tonChange={props.noteUpdate(note.id, note)}\n\t\t\t></ReactQuill> */}\n\t\t\t<input\n\t\t\t\t// className={classes.titleInput}\n\t\t\t\tplaceholder=\"content\"\n\t\t\t\tvalue={text ? text : \"\"}\n\t\t\t\tonChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\t\tupdateBody(event.target.value);\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default EditorApp;\n"]},"metadata":{},"sourceType":"module"}