{"ast":null,"code":"var _jsxFileName = \"/Users/shige11910/notion-clone/frontend/src/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { auth } from \"./firebase\"; // Contextの型を用意\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Contextを宣言。Contextの中身を {currentUser: undefined} と定義\nconst AuthContext = /*#__PURE__*/createContext({\n  currentUser: undefined\n});\n\nconst AuthProvider = props => {\n  _s();\n\n  // Contextに持たせるcurrentUserは内部的にはuseStateで管理\n  const [currentUser, setCurrentUser] = useState(undefined);\n  useEffect(() => {\n    // Firebase Authのメソッド。ログイン状態が変化すると呼び出される\n    auth.onAuthStateChanged(user => {\n      setCurrentUser(user);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser: currentUser\n    },\n    children: [\"// \\u3053\\u3046\\u3059\\u308B\\u3053\\u3068\\u3067\\u3001\\u4E0B\\u968E\\u5C64\\u306E\\u30B3\\u30F3\\u30DD\\u30FC\\u30CD\\u30F3\\u30C8\\u3092\\u5185\\u5305\\u3067\\u304D\\u308B\\u3088\\u3046\\u306B\\u306A\\u308B\", props.children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"mgZNHfPFD27jtJkgCaPZqgKXKZc=\");\n\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/shige11910/notion-clone/frontend/src/AuthContext.tsx"],"names":["React","createContext","useEffect","useState","auth","AuthContext","currentUser","undefined","AuthProvider","props","setCurrentUser","onAuthStateChanged","user","children"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AAEA,SAAQC,IAAR,QAAmB,YAAnB,C,CAEA;;;AAKA;AACA,MAAMC,WAAW,gBAAGJ,aAAa,CAAe;AAAEK,EAAAA,WAAW,EAAEC;AAAf,CAAf,CAAjC;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAgB;AAAA;;AACnC;AACA,QAAM,CAACH,WAAD,EAAcI,cAAd,IAAgCP,QAAQ,CAC5CI,SAD4C,CAA9C;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACAE,IAAAA,IAAI,CAACO,kBAAL,CAAwBC,IAAI,IAAI;AAC9BF,MAAAA,cAAc,CAACE,IAAD,CAAd;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLN,MAAAA,WAAW,EAAEA;AADR,KADT;AAAA,0MAMGG,KAAK,CAACI,QANT;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAvBD;;GAAML,Y;;KAAAA,Y;AAyBN,SAASH,WAAT,EAAsBG,YAAtB","sourcesContent":["import User from \"firebase\";\nimport React, { createContext, useEffect, useState } from \"react\";\n\nimport {auth} from \"./firebase\";\n\n// Contextの型を用意\ninterface IAuthContext {\n  currentUser: User.User | null | undefined;\n}\n\n// Contextを宣言。Contextの中身を {currentUser: undefined} と定義\nconst AuthContext = createContext<IAuthContext>({ currentUser: undefined });\n\nconst AuthProvider = (props: any) => {\n  // Contextに持たせるcurrentUserは内部的にはuseStateで管理\n  const [currentUser, setCurrentUser] = useState<User.User | null | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    // Firebase Authのメソッド。ログイン状態が変化すると呼び出される\n    auth.onAuthStateChanged(user => {\n      setCurrentUser(user);\n    });\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser: currentUser\n      }}\n    >\n      // こうすることで、下階層のコンポーネントを内包できるようになる\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport { AuthContext, AuthProvider };"]},"metadata":{},"sourceType":"module"}